datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Plant {
  id               Int         @id @default(autoincrement())
  name             String
  slug             String      @unique
  difficulty       Int
  imageSrc         String
  lightExposure    String
  soilType         String
  description      String
  wateringInterval Int
  userPlants       UserPlant[]
}

model UserPlant {
  id             Int             @id @default(autoincrement())
  user           User            @relation(fields: [userId], references: [id])
  userId         Int
  plant          Plant           @relation(fields: [plantId], references: [id])
  plantId        Int
  image          Bytes?
  comments       Comment[]
  exchangeOffers ExchangeOffer[]
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  name         String
  password     String         @default("")
  plants       UserPlant[]
  comments     Comment[]
  aiAnalyses   AIAnalysis[]
  chatMessages ChatMessage[]
}

model Comment {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  userPlant   UserPlant @relation(fields: [userPlantId], references: [id], onDelete: Cascade)
  userPlantId Int
  text        String
}

model ExchangeOffer {
  id          Int       @id @default(autoincrement())
  userPlant   UserPlant @relation(fields: [userPlantId], references: [id], onDelete: Cascade)
  userPlantId Int
  phone       String
}

model AIAnalysis {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  type        String   // 'plant-identification', 'disease-detection'
  imageData   Bytes?   // Store the uploaded image
  result      Json     // Store the AI analysis result
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ChatMessage {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  role      String   // 'user' or 'assistant'
  content   String
  createdAt DateTime @default(now())
}
